name: Mirror Releases from Private
on:
  workflow_dispatch: {}    # manuell starten

jobs:
  mirror:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout public repo
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Mirror releases
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SRC_REPO: ${{ secrets.SRC_REPO }}        # z.B. DoubleGx0/FixIT (privat)
          DST_REPO: ${{ github.repository }}       # z.B. DoubleGx0/FixIT-public
        run: |
          set -euo pipefail

          releases_json=$(gh api -H "Accept: application/vnd.github+json" "/repos/${SRC_REPO}/releases?per_page=100")

          default_branch=$(gh api "/repos/${DST_REPO}" | jq -r '.default_branch')
          sha=$(gh api "/repos/${DST_REPO}/git/ref/heads/${default_branch}" | jq -r '.object.sha')

          echo "$releases_json" | jq -r 'sort_by(.created_at) | .[] | @base64' | while read -r row; do
            _jq() { echo "$row" | base64 -d | jq -r "$1"; }

            tag=$(_jq '.tag_name')
            name=$(_jq '.name // empty')
            body=$(_jq '.body // ""')
            draft=$(_jq '.draft')
            prerelease=$(_jq '.prerelease')

            echo "==> ${tag}"

            if ! gh api "/repos/${DST_REPO}/git/ref/tags/${tag}" >/dev/null 2>&1; then
              gh api --method POST "/repos/${DST_REPO}/git/refs" -f ref="refs/tags/${tag}" -f sha="$sha" >/dev/null
            fi

            if ! gh release view "$tag" -R "${DST_REPO}" >/dev/null 2>&1; then
              gh release create "$tag" \
                -R "${DST_REPO}" \
                --title "${name:-$tag}" \
                --notes "$body" \
                $( [ "$prerelease" = "true" ] && echo "--prerelease" ) \
                $( [ "$draft" = "true" ] && echo "--draft" ) \
                >/dev/null
            fi

            echo "$row" | base64 -d | jq -c '.assets[]?' | while read -r asset; do
              asset_name=$(echo "$asset" | jq -r '.name')
              asset_id=$(echo "$asset" | jq -r '.id')

              echo "   -> $asset_name"
              tmpfile=$(mktemp)

              gh api -H "Accept: application/octet-stream" "/repos/${SRC_REPO}/releases/assets/${asset_id}" > "$tmpfile"
              gh release upload "$tag" "$tmpfile#$asset_name" -R "${DST_REPO}" --clobber >/dev/null
              rm -f "$tmpfile"
            done
          done
